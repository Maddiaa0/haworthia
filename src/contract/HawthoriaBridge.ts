
/* Autogenerated file, do not edit! */

/* eslint-disable */
import { AztecAddress, CompleteAddress, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, FieldLike, Wallet } from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { AztecRPC, PublicKey } from '@aztec/types';
import { ContractAbi } from '@aztec/foundation/abi';
import HawthoriaBridgeContractAbiJson from '../../circuits/target/HawthoriaBridge.json' assert { type: 'json' };
export const HawthoriaBridgeContractAbi = HawthoriaBridgeContractAbiJson as ContractAbi;

/**
 * Type-safe interface for contract HawthoriaBridge;
 */
export class HawthoriaBridgeContract extends ContractBase {
  
  private constructor(
    /** The deployed contract's complete address. */
    completeAddress: CompleteAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    super(completeAddress, HawthoriaBridgeContractAbi, wallet);
  }
  

  
  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    /** The deployed contract's address. */
    address: AztecAddress,
    /** The wallet. */
    wallet: Wallet,
  ) {
    const extendedContractData = await wallet.getExtendedContractData(address);
    if (extendedContractData === undefined) {
      throw new Error('Contract ' + address.toString() + ' is not deployed');
    }
    return new HawthoriaBridgeContract(extendedContractData.getCompleteAddress(), wallet);
  }

  
  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(rpc: AztecRPC, ) {
    return new DeployMethod<HawthoriaBridgeContract>(Point.ZERO, rpc, HawthoriaBridgeContractAbi, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(rpc: AztecRPC, publicKey: PublicKey, ) {
    return new DeployMethod<HawthoriaBridgeContract>(publicKey, rpc, HawthoriaBridgeContractAbi, Array.from(arguments).slice(2));
  }
  

  
  /**
   * Returns this contract's ABI.
   */
  public static get abi(): ContractAbi {
    return HawthoriaBridgeContractAbi;
  }
  

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {
    
    /** _approve_bridge_and_exit_input_asset_to_L1(token_bridge: struct, amount: field) */
    _approve_bridge_and_exit_input_asset_to_L1: ((token_bridge: { address: FieldLike }, amount: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** fundPool(pool_id: integer, amount: integer, asset_bridge: struct, asset: field, callerOnL1: struct) */
    fundPool: ((pool_id: (bigint | number), amount: (bigint | number), asset_bridge: { address: FieldLike }, asset: FieldLike, callerOnL1: { address: FieldLike }) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** is_valid_public(message_hash: field) */
    is_valid_public: ((message_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
