{
  "name": "TokenBridge",
  "functions": [
    {
      "name": "_assert_token_is_same",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_call_mint_on_token",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "_initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "claim_private",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret_hash_for_redeeming_minted_notes",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_for_L1_to_L2_message_consumption",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "claim_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "to",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "serialized_note",
          "type": {
            "kind": "array",
            "length": 0,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+2VUQ6CMAyGu00GxcQ7eIOZeADufypXbJPfqk/WBwJNmkHH2q9/tjESUaKnle4nejebX3Rsv9ktxeVq/+TMG+EsgZzpA2eCfSHj0L12H7tfNc4at31kMVuXIVZcfoZ5swrPS1BvNV77Nig/wYj9XkCrwLp3dhqhnl43gvqyZoplWXXl4JySYwZ+69XYzzDP8M0cy7HeVRO9amrvyHew7puVIVYhlh2znEN/TkN/BKQFpHCBGt8ucLMHOSrVPQkIAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "exit_to_l1_private",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "token",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "recipient",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "callerOnL1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+1dBZgUR9Oe2+OQCPEQJAkSgsP2+eFuwTVoOMXdIUDyxd3d3d3d3d3d3T2Bv2qpS4bhDnZv3z62/ul5nvcpOt98fVVv9/RbU9M783YNz3s53fv3SBPbXWw0ucNkUB8ZFfSbFc3Nzi7Nyyw1WaYwmllQlJ8Tzc4pys03+SYnP6ckMz8rqzQ/Oz+voKggL1pgsrNKTVlOQVaZdJyB8zFqI+6a1EdNC3HXTPG4a1EftSzEXQscd2XzPVk/GwH9TBMuG0t/9QhrCbuJrS+2gdiGYhv9P7VtCbvLmDEv2wsvu6eAX3sQIt5/88nz8NfWbri+oo2lnz299fOrCaEpoRlhL0Jzwt6EFoSWhFaE1oQ2Em87QntCB/aFYAiZhCxCNiGHkEvII+QTCggdCZ0InQldCF2FpDThjn2p7f3XbhxoNwm0mwbazQLtvQLt5oH23oF2i0C7ZaDdKtBuHWi3CbTbBtrtAu32gXaHQDsaaJtAOzPQzgq0swPtnEA7N9DOC7TzA+2CQLtjoN0p0O4caHcJtLtK23+UpyLdxUaTOza4ZpJd2/cE9vVNuh09C/JXVT9Ly/iImsagvngsmgD5+zbl+Yt1bZom31emxGyaAfn7LpX5y/7XT7NXcn1FfTGb5kD+vk9V/jI38NPsXfW+ooGYTQsgfz+kIH+5ZRv5aVpWra/8CmI2rYD8/Zhq/OVX6KdpnXhfeZXEbNoA+fsplfjLq9RP0zaxvjI3EbNpB+Tv51ThL2+Tfpr28fdVvJmYTQcgf7+kAn95m/XTROPrKxpHzMYA+ft1S/MXjctPk7n5vnLijNlkAfn7bUvylx23nyZ7k31llyUQs8kB8vf7luIvLyE/TW7lfeUnGLPJA/L3xxbgr6AsYT9NfsV9RasQsykA8vdndfMXrZKfpuPGfZkqxmw6Afn7qzr5K6myn6bzhn1lJRGz6QLk7+9q4i+zLCk/TVcPV0v01+yS5e+fauIvmtxhgHU28x2Qv7VK+APWicwPQP7WKeEPWOcwPwH582ro4A94n25+AfKXpoQ/4H2m+Q3IX0QJf8D7JPMHkL90JfwB83zzF5C/Gkr4A+ap5h8gfxlK+APmWWYdkL+aSvgD5gnGr5lJ76dTwh9Q50w6kL/aSvgDrtMmA8hfHSX8AdcZUwvI31ZK+ANeJwY4ZwySvwzpp7FYrjlxrY1rd1yz5Boo1365lsw1dK7J87MIfrbBz3T4GRE/G+OB4GeM/MySn9Xys19+5s3P0HnvAO9F4D0YvKeD97Lw3phm3vp9kE3k7/MetYhndx9qfVxf/+5D7SZ99iD0JPQi9Cb0IfQl9CP0JwwgDCTsQxhEGEwYQhhKGEYYThhBGEkYRRhNGEMYS9iXMI4wnjCBMJEwiTBZSCrfl8i++Pcpdg+0ewTaPQPtXoF270C7T6DdN9DuF2j3D7QHBNoDA+19Au1BgfbgQHtIoD000B4WaA8PtEcE2iMD7VGB9uhAe0ygPTbQ3jfQHhdojw+0JwTaEwPtSYH2ZM/+PlT/NZPs2t8N2FeratKRZPehdgf1xWPRA8hf65TnL9a16Zl8X//uQ+0F5K9NKvPn24faO7m+NtiH2gfIX9tU5S+wD7Vv1fvaaB9qPyB/7VKQv4r2ofavWl8V7kMdAOSvfarxV8k+1IGJ91XpPtR9gPx1SCX+NrEPdVBifW1yH+pgIH/RVOFvM/tQh8Tf12b3oQ4F8mdSgb849qEOi6+vuPahDgfyl7ml+YtzH+qIzfcV9z7UkUD+srYkfwnsQx21yb4S24c6Gshf9pbiL8F9qGMq7yvhfahjgfzlbAH+qrIPdd+K+6rSPtRxQP5yq5u/Ku5DHb9xX1XehzoByF9edfKXxD7UiRv2ldQ+1ElA/vKrib9k96FO9nC1xFbA50gFSp4jAetspg2Qv45K+APWiUw7IH+dlPAHrHOYDkD+OivhD3ifbgyQvy5K+APeZ5osIH9dlfAHvE8yOUD+uinhD5jnmzwgf92V8AfMU00BkL8eSvgD5lmmE5C/nkr4A+YJpguQv15K+APqnOkG5K+3Ev6A67TpAeSvjxL+gOuM6QXkr68S/oDXiQHOGYPkr/w9y42lP645ca2Na3dcs+QaKNd+uZbMNXSuyfOzCH62wc90+BkRPxvjZ238jJGfWfKzWn72y8+8+Rk67x3gvQi8B4P3dPBelt7e+j2PvMeofG8V71GLeHb3oTbA9fXvPtT9CFMIhYQiQjGhhFBKKCNMJUwjTCfMIMwkzCLMJswhzCXMI8wnLCAsJCwiLCYsISwlLCMsJ6wgrCTsT1hFWC0kle9LZF/8+xSnBNqFgXZRoF0caJcE2qWBdlmgPTXQnhZoTw+0ZwTaMwPtWYH27EB7TqA9N9CeF2jPD7QXBNoLA+1FgfbiQHtJoL000F4WaC8PtFcE2isD7f0D7VWB9mrP/j5U/zWT7Nq/H7CvUiX7UKeA+uKxKATyV6ZkH2pR8n39uw+1GMjfVCX7UEuS62uDfailQP6mKdmHWlb1vjbahzoVyN90JftQp1Wtrwr3oU4H8jdDyT7UGYn3Vek+1JlA/mYq2Yc6K7G+NrkPdTaQv1lK9qHOib+vze5DnQvkb7aSfajz4usrrn2o84H8zVGyD3XB5vuKex/qQiB/c5XsQ120yb4S24e6GMjfPCX7UJdU3lfC+1CXAvmbr2Qf6rKK+6rSPtTlQP4WKNmHumLjvqq8D3UlkL+FSvah7r9hX0ntQ10F5G+Rkn2oqz1cLbEU+BxpsZLnSMA6m5kK5G+JEv6AdSIzHcjfUiX8AescZiaQv2VK+APep5vZQP6WK+EPeJ9p5gL5W6GEP+B9kpkP5G+lEv6Aeb5ZCORvfyX8AfNUsxjI3yol/AHzLLMUyN9qJfwB8wSzHMjfGiX8AXXOrATyd4AS/oDrtFkF5O9AJfwB1xmzBsjf/5TwB7xODHDOGCR/vA+V97M1lv645sS1Nq7dcc2Sa6Bc++VaMtfQuSbPzyL42QY/0+FnRPxsjJ+18TNGfmbJz2r52S8/8+Zn6Lx3gPci8B4M3tPBe1lKvPV7HnmPEe+tmuKt30PpP4J7UJPWDeDcyJD5FpH+GhG4/xref/PQf4D+brQybqLJHaaRAh8PQPqodaDWKPDxQAs+xo6IxRmVtKoBg67hVXygSUUPPJIDWz4ehPSRZaCGV7EM1FA4gBpk4GAPLAMaB0qDDBxiwcfYgZYB/4xKVgYO9bAykObpm5xIDmz5eJgHloHyOyk+/DKQ4ekbQA0ycLgHlgGNA6VBBo6w4GPsQMuAf0YlKwNHelgZiHj6JieSA1s+HuWBVxFX/LHj49FuoHQs98dY8DF2oMv7wBm1QdDJSsexHlY6PIUTHcmBLR+P88ArkisY2fHxeDdQOqTjBAs+xg60dABn1AZBJysdJ3pY6dBYfEJyYMvHkzzwiuSKTHZ8PNkNlA7pOMWCj7EDLR3AGbVB0MlKx6keVjo0FqyQHNjy8TQPvCK5gpUdH093A6VDOs6w4GPsQEsHcEZl+oNOVjrO9LDS4Smc6EgObPl4lgdekVzByo6PZ7uB0iEd51jwMXagpQM4ozL9QScrHed6WOnQWLBCcmDLx/M88IrkClZ2fDzfDZQO6bjAgo+xAy0d5+P6yvQHnax0XOhhpUNjwQrJgS0fL/LAK5IrWNnx8WI3UDqk4xILPsYOtHQAZ1SWP+hkpeNSDysdnsKJjuTAlo+XeeAVyRWs7Ph4uRsoHdJxhQUfYwdaOoAzKssfdLLScaWHlQ6NBSskB7Z8vMoDr0iuYGXHx6vdQOmQjmss+Bg70NIBnFFZ/qCTlY5rPax0aCxYITmw5eN1HnhFcgUrOz5e7wZKh3TcYMHH2IGWDuCMyvYHnax03OhhpcNTONGRHNjy8SYPvCK5gpUdH292A6VDOm6x4GPsQEsHcEZl+4NOVjpu9bDSobFgheTAlo+3eeAVyRWs7Ph4uxsoHdJxhwUfYwdaOoAzKtsfdLLScaeHlQ6NBSskB7Z8vMsDr0iuYGXHx7vdQOmQjnss+Bg70NIBnFE5/qCTlY57Pax0eAonOpIDWz7e54FXJFewsuPj/W6gdEjHAxZ8jB1o6bgf11eOP+hkpeNBDysdGgtWSA5s+fiQB16RXMHKjo8Pu4HSIR2PWPAxdqClAzijcvxBJysdj3pY6dBYsEJyYMvHxzzwiuQKVnZ8fNwNlA7peMKCj7EDLR3AGZXrDzpZ6XjSw0qHp3CiIzmw5eNTHnhFcgUrOz4+7QZKh3Q8Y8HH2IGWDuCMyvUHnax0POthpUNjwQrJgS0fn/PAK5IrWNnx8Xk3UDqk4wULPsYOtHQAZ1SuP+hkpeNFDysdGgtWSA5s+fiSB16RXMHKjo8vu4HSIR2vWPAxdqClAzij8vxBJysdr3pY6fAUTnQkB7Z8fM0Dr0iuYGXHx9fdQOmQjjcs+Bg70NIBnFF5/qCTlY43Pax0aCxYITmw5eNbHnhFcgUrOz6+7QZKh3S8Y8HH2IGWDuCMyvMHnax0vOthpUNjwQrJgS0f3/PAK5IrWNnx8X03UDqk4wMLPsYOtHS8j+sr3x90stLxoYeVDk/hREdyYMvHjzzwiuQKVnZ8/NgNlA7p+MSCj7EDLR3AGZXvDzpZ6fjUw0qHxoIVkgNbPn7mgVckV7Cy4+PnbqB0SMcXFnyMHWjpAM6ofH/QyUrHlx5WOjQWrJAc2PLxKw+8IrmClR0fv3YDpUM6vrHgY+xASwdwRhX4g05WOr71sNLhKZzoSA5s+fidB16RXMHKjo/fu4HSIR0/WPAxdqClAzijCvxBJysdP3pY6dBYsEJyYMvHnzzwiuQKVnZ8/NkNlA7p+MWCj7EDLR3AGVXgDzpZ6fjVw0qHxoIVkgNbPv7mgVckV7Cy4+PvbqB0SMcfFnyMHWjpAM6oQn/QyUrHnx5WOjyFEx3JgS0f//LAK5IrWNnx8W83UDqk4x8LPsYOtHQAZ1ShP+hkpWOth5UOjQUrJAe2fFzngVckV7Cy4yN3GPqB0iAdaWl4H2MHWjqAM6rQH3Sy0hFJw0qHxoJVJC31fUxHr0iuYGXHxxpuoHRIR4YW6QDOqKIMoHTUBEuHp3Ci11QgHbXQK5IrWNnxsbYbKB3SUUeLdABnVFEdoHRsBZYOjQWrrRRIx9auDqJDOrZxA6VDOrbVIh3AGVW0LVA66rqClamrQDq2c3UQHdKxvRsoHdKxgxbpAM6o4h2A0rGjK1iZHRVIx06uDqJDOnZ2A6VDOnbRIh3AGVW8C1A6dnUFK7OrAumo5+ogOqRjNzdQOqSjvhbpAM6o4vpA6WjgClamgQLpaOjqIDqko5EbKB3SsbsW6QDOqJLdgdKxhytYmT0USMeerg6iQzoau4HSIR1NtEgHcEaVNAFKR1NXsDJNFUhHM1cH0SEde7mB0iEdzbVIB3BGlTQHSsfermBl9lYgHS1cHUSHdLR0A6VDOlppkQ7gjCptBZSO1q5gZVorkI42rg6iQzrauoHSIR3ttEgHcEaVtgNKR3tXsDLtFUhHB1cH0SEdUTdQOqTDaJEO4IwqNUDpyHQFK5OpQDqyXB1Eh3Rku4HSIR05WqQDOKPKcoDSkesKViZXgXTkuTqIDunIdwOlQzoKtEgHcEaVFQClo6MrWJmOCqSjk6uD6JCOzm6gdEhHFy3SAZxRZV2A0tHVFaxMVwXS0c3VQXRIR3c3UDqko4cW6cDNKBPtAZSOnq5gZXoqkI5erg6iQzp6u4HSIR19tEhHb6B09AFKR19XsDJ9FUhHP1cH0SEd/d1A6ZCOAVqkoz9QOgYApWOgK1iZgQqkYx9XB9EhHYPcQOmQjsFapAM3o8wGQScrHUNcwcoMUSAdQ10dRId0DHMDpUM6hmuRjmFA6RgOlI4RrmBlRiiQjpGuDqJDOka5gdIhHaO1SMcooHSMBkrHGFewMmMUSMdYVwfRIR37uoHSIR3jtEgHbkaZzHFA6RjvClZmvALpmODqIDqkY6IbKB3SMUmLdEwESsckoHRMdgUrM1mBdOzn6iA6pGOKGygd0lGoRTqmAKWjECgdRa5gZYoUSEexq4PokI4SN1A6pKNUi3TgZpTJKgVKR5krWJkyBdIx1dVBdEjHNDdQOqRjuhbpmAaUjulA6ZjhClZmhgLpmOnqIDqkY5YbKB3SMVuLdMwCSsdsoHTMcQUrM0eBdMx1dRAd0jHPDZQO6ZivRTpwM8pkzwdKxwJXsDILFEjHQlcH0SEdi9xA6ZCOxVqkYxFQOhYDpWOJK1iZJQqkY6mrg+iQjmVuoHRIx3It0rEMKB3LgdKxwhWszAoF0rHS1UF0SMf+bqB0SMcqLdKBm1EmZxVQOla7gpVZrUA61rg6iA7pOMANlA7pOFCLdBwAlI4DgdLxP1ewMv9TIB0HuTqIDuk42A2UDuk4RIt0HAyUjkOA0nGoK1iZQxVIx2GuDqJDOg53A6VDOo7QIh24GWVyjwBKx5GuYGWOVCAdR7k6iA7pONoNlA7pOEaLdBwNlI5jgNJxrCtYmWMVSMdxrg6iQzqOdwOlQzpO0CIdxwOl4wSgdJzoClbmRAXScZKrg+iQjpPdQOmQjlO0SAduRpm8U4DScaorWJlTFUjHaa4OokM6TncDpUM6ztAiHacDpeMMoHSc6QpW5kwF0nGWq4PokI6z3UDpkI5ztEjH2UDpOAcoHee6gpU5V4F0nOfqIDqk43w3UDqk4wIt0oGbUSb/AqB0XOgKVuZCBdJxkauD6JCOi91A6ZCOS7RIx8VA6bgEKB2XuoKVuVSBdFzm6iA6pONyN1A6pOMKLdJxOVA6rgBKx5WuYGWuVCAdV7k6iA7puNoNlA7puEaLdOBmlCm4Bigd17qClblWgXRc5+ogOqTjejdQOqTjBi3ScT1QOm4ASseNrmBlblQgHTe5OogO6bjZDZQO6bhFi3TcDJSOW4DScasrWJlbFUjHba4OokM6bncDpUM67tAiHbgZZQrvAErHna5gZe5UIB13uTqIDum42w2UDum4R4t03A2UjnuA0nGvK1iZexVIx32uDqJDOu53A6VDOh7QIh33A6XjAaB0POgKVuZBBdLxkKuD6JCOh91A6ZCOR7RIB25GmaJHgNLxqCtYmUcVSMdjrg6iQzoedwOlQzqe0CIdjwOl4wmgdDzpClbmSQXS8ZSrg+iQjqfdQOmQjme0SMfTQOl4Bigdz7qClXlWgXQ85+ogOqTjeTdQOqTjBS3SgZtRpvgFoHS86ApW5kUF0vGSq4PokI6X3UDpkI5XtEjHy0DpeAUoHa+6gpV5VYF0vObqIDqk43U3UDqk4w0t0vE6UDreAErHm65gZd5UIB1vuTqIDul42w2UDul4R4t04GaUKXkHKB3vuoKVeVeBdLzn6iA6pON9N1A6pOMDLdLxPlA6PgBKx4euYGU+VCAdH7k6iA7p+NgNlA7p+ESLdHwMlI5PgNLxqStYmU8VSMdnrg6iQzo+dwOlQzq+0CIduBllSr8ASseXrmBlvlQgHV+5OogO6fjaDZQO6fhGi3R8DZSOb4DS8a0rWJlvFUjHd64OokM6vncDpUM6ftAiHd8DpeMHoHT86ApW5kcF0vGTq4PokI6f3UDpkI5ftEgHbkaZsl+A0vGrK1iZXxVIx2+uDqJDOn53A6VDOv7QIh2/A6XjD6B0/OkKVuZPBdLxl6uD6JCOv91A6ZCOf7RIx99A6fgHKB1rXcHKrFUgHetsTfSgo8lOKJ4BGEdzC2z6mQbzMyvTpp8RmJ/5JTb9TIf5WVrMvvEC/K/D1Hdt9llsRGy62IO89fY4sWeJvUzsTWLvE/uU2NfEfiT2O7F/ia2Vtt7uJHZPsW3E5ontJXao2Alip4pdKHaN2KPEnib2IrHXib1L7GNiXxL7ntivxP4m9jDx9ySx54m9SuxtYh8S+5zYt8R+JvYnsevEbi391xPbTGwHsZ3E9hM7Uux+YmeKXSr2ILHHiT1L7GVibxJ7n9inxL4m9iOx34n9q5xP8fc0sReJvU7sXWIfE/uS2PfEfiX2N7Hp0u92YhuKbSE2S2w3sfuIHSu2WOxcsSvLx0nsSWLPE3uV2NvEPiT2ObFvif1M7E9i14lt7K0/atD1kEGoSajF1wahDmErwtaEbQjbEuoStiNsT9iBsCNhJ8LOhF0IuxLqEXYj1Cc0IDQkNCLsTtiDsCehMaEJoSmhWWT9mlLL5089wlpCo5DatoS9fLxsL7zwf9vSfjWPrF9jy3Ugzdv4vh+dxNTD9RX1+7o3z3H5dx1v4yS0pu/foL9vauL5iWb4fK3j87k8nrre+ut9W2nPKyye2WPB1MWzS+csWugnJD0wgGm+TtJ8f6BG4Hw/eeX/Wy2vgoJQdxCLXgVRovpuHsFlN3tHcKOc7lX8FBJ9tUU8S7cMID+LCkqiOdn52TY5aB7Brzhsy6/AFtR/S0IrQmtCG0JbQjtCe0IHQpTAg5FJyGLllf+v/wKM+P5b8OKtphUtamtFq+2LwwvEW1diqYn9uyX8t4I1t+Ai1r0CPtnX+vLv0jnzF5cuLh22uGjW9OK+i+cUL5o+d06vwlmz/BOh/I+UT4j0CoIM/vcaPkJqyb8zfP+t/P9Xy2etrcDpXsVFG/SV2CqS2quRHJl+LrKlkRP5b4D8UsoDua4Czvy5VETOiWzinLRK+qnsirE2GcqD48D/CTiD+htMZk4EX4DIsTTB0JXgVoC0pLRs/ZEdSX3+0GkdMuZcX18mPyszMy+Lz8svoT9TUpyZn5lZUpQdLY4WFmeWFmSbgrLszOys4pLiIuqz0JRFywqLC8ry1/vlv5nyH+jrJ9dCSsNHXmTjdMQ//y2kBxuk/xXxZ3WxszU4eRF8v/nASW8r7vwIfIwq9BWx0OVbEKAC8IXJdHKfEbk4qiNLa60wS+sojU5hy9I6WszSmMxOFi6STkqytNbALK1jJPX5Q2dpyJg7K8zSOlvK0rq4LA0zOF0sZGldUzxL47i7KsnSOomv6H67WcjSulVzltZGYZbWXRo9wpaldbeYpTGZPSxcJD2UZGltgFla90jq84fO0pAx91SYpfW0lKX1clkaZnB6WcjSeqd4lsZx91aSpfUQX9H99rGQpfWp5iwtqjBL6yuNfmHL0vpazNKYzH4WLpJ+SrK0KDBL6xtJff7QWRoy5v4Ks7T+lrK0AS5LwwzOAAtZ2sAUz9I47oFKsrR+4iu6330sZGn7VHOWZhRmaYOkMThsWdogi1kakznYwkUyWEmWZoBZ2qBI6vOHztKQMQ9RmKUNsZSlDXVZGmZwhlrI0oaleJbGcQ9TkqUNFl/R/Q63kKUNr+YsLVNhljZCGiPDlqWNsJilMZkjLVwkI5VkaZnALG1EJPX5Q2dpyJhHKczSRlnK0ka7LA0zOKMtZGljUjxL47jHKMnSRoqv6H7HWsjSxkY2zs7QC2oEyEELSyKCHquWAD8r+vU7emyQb0DIqqaxiSZ3mH5K/BysxM/qSuySfk8aMOa2IYy5nZK1d1/g2su+8csVyhNX7pvfj5QjtpPYHmL5HUPjRPtref+9oIHHYa3PtpfzO0Q2/R6mHQjjff2VJ8uVnc939BMSPH9igudPSvD8yQmev1+C509J8PzCBM8vSvD84gTPL0nw/NIEzy9L8PypCZ4/LcHzpyd4/gzf+ZFKzo+9SzDO82bFed7sOM+bE+d5c+M8b16c582P87wFcZ63MM7zFsV53uI4z1sS53lL4zxvWZznLY/zvBW+88bKeeNl3W4eie99ehPkvIliJ4mdLHY/sVPEFootElsstkRsqdgysVPFThM7XewMsTPFzhI7W+wcsXPFzhM7X+wCsQvFLhK7WOwSsUvFLhO7XOyKOPlxtnpsG8LKCtbf8rxknIzXSrE7Evb3nd9Yzk+T8+uLbRgyHvn9mKt8vJS/t3NVZMv7tTqy8Xs7g28TRN8Dpnn4ewO0j/UV+NgQ6KO/sL0mUu3vP81S+/5T/7tO/1+//3R1BHfXvSaCG+Xqev8p8m3DFbibdN8l2WXFxQW5pTY5WB3BrzhsL5B/H0D9H0j4H+EgwsGEQwiHEg4jHE44gnAk4SjC0YRjCMcSjiMcTziBcCLhJMLJhFMIpxJOI5xOOINwJuEswtmEcwjnEs4jnE+4gHAh4SLCxYRLCJcSLiNcTriCcCXhKsLVhGsI1xKuI1xPuIFwI+Emws2EWwi3Em4j3E64g3An4S7C3YR7CPcS7iPcT3iA8CDhIcLDhEcIjxIeIzxOeILwJOEpwtOEZwjPEp4jPE94gfAi4SXCy4RXCK8SXiO8TniD8CbhLcLbhHcI7xLeI7xP+IDwIeEjwseETwifEj4jfE74gvAl4SvC14RvCN8SviN8T/iB8CPhJ8LPhF8IvxJ+I/xO+IPwJ+Evwt+EfwhrCesi6y/kNEKEkE6oQcgg1CTUItQm1CFsRdiasA1hW0JdwnaE7Qk7EHYk7ETYmbALYVdCPcJuhPqEBoSGhEaE3Ql7EPYkNE5379P1x2vnfbqFJpn36e4k/y4unDVr2ILpSwoXlZa/Tde/pJR3X760uDfpVvJ3eK0F9VVte+GayKg1TQ/ZXjgO3NZeOCaTgX7Ewn2CfLS6F85/ISS7F65JeurzFwHzh4y5Wbq+vXDNgOPk93evdLcXDjI4e6Xj+20OnPS24m6eDh8jK3vhmoqv6H73Bl+YfBFyn3LDUi1Z2kEKs7QWMu9ahi1La2ExS2MyW1q4SFoqydIOAmZpLdJTnz90loaMuZXCLK2VpSyttcvSMIPT2kKW1ibFszSOu42SLK2l+Irut62FLK1tNWdpByvM0trJvGsftiytncUsjclsb+Eiaa8kSzsYmKW1S099/tBZGjLmDgqztA6WsrSoy9IwgxO1kKWZFM/SOG6jJEtrL76i+820kKVlVnOWdoTCLC1L5l122LK0LItZGpOZbeEiyVaSpR0BzNKy0lOfP3SWhow5R2GWlmMpS8t1WRpmcHItZGl5KZ6lcdx5SrK0bPEV3W++hSwtv5qztCMVZmkFMu86hi1LK7CYpTGZHS1cJB2VZGlHArO0gvTU5w+dpSFj7qQwS+tkKUvr7LI0zOB0tpCldUnxLI3j7qIkS+sovqL77WohS+tazVnaUQqztG4y77qHLUvrZjFLYzK7W7hIuivJ0o4CZmnd0lOfP3SWhoy5h8IsrYelLK2ny9Iwg9PTQpbWK8WzNI67l5Isrbv4iu63t4UsrXc1Z2mNLYkAeF5skKX1kXnXN2xZWh+LWRqT2dfCRdJXSZbWGLDglmdpfdJTnz90loaMuZ/CLK2fpSytv8vSMIPT30KWNiDFszSOe4CSLK2v+Irud6CFLG1guv3vHdQDcnCApVoceqwOBPhZ0duu0GODfOPZ0dU0NtHkDmMrEbGxdU+Dnx2V+FldZcJU+kbBIREdMQPfPGgOVaIR+6TjNIJ983+Xgfvm9982FdtSbHux/O7TQZKjVPRdhnpi+Y2EbA+PbPo9u/xdhsG+/srfZrab/L36YhuIbSi2kdjdxW5DGOLr53jpZ7D876vFj2PEHiv2OLHHiz1B7IliTxJ7sthTxJ4q9jSxp4s9Q+yZYs8Se7bYc8SeK/Y8seeLvUDshWIvEnux2EvEXir2MrGXi71C7JVirxJ7tdhrxF4r9jqx14u9QeyNYm8Se7PYW8TeKvY2sbeLvUPsnWLvEnu32HvE3iv2PrH3i31A7INiHxL7sNhHxD4q9jGxj4t9QuyTYp8S+7TYZ8Q+K/Y5sc+LfUHsi2JfEvuy2FfEvir2NbGvi31D7Jti3xL7tth3xL4r9j2x74v9QOyHYj8S+7HYT8R+KvYzsZ+L/ULsl2K/Evu12G/Efiv2O7Hfi/1B7I9ifxL7s9hfxP4q9jexv4v9Q+yfYv8S+7fYf8SuFbtOrCfXaZrYiNh0sTXEZoitKbaW2Npi65SvU2K3Ll8fxG4rtq7Y7cRuL3YHsTuK3UnszmJ3Ebur2Hpih4jdQ+yeYlsThvrWpfJb0fJ1cpCcN7T87xKG+e5XPa+CQp+JJnXU2FDnkuotI4LTtQtqVGOhNImoa0Y28rPKvdUC8ndhdfIXrXrUtSMV+lml3uoA+buouvmLVi3qrSKV+plwb1sD+bt4S/AXTTzqbSKb9DOh3rYF8nfJluIvmljUdSOb9TPu3rYD8nfpluQvGn/U20fi8jOu3nYA8nfZluYvGl/UO0bi9nOzve0E5O/yVOAvuvmod44k5Ocme9sFyN8VqcJfdNNR7xpJ2M9Ke6sH5O/KVOIvWnnUu0Wq5GeFvdUH8ndVqvEXrTjqBpEq+7lRbw2B/F2divxFN466USQpPzfobXcgf9ekKn/RDaPeI5K0n//2tieQv2tTmb/of1E3jkD8jPXWBMjfdanOX3R91E0jMD9NMyB/12vgj2IG1tmMv+aULH83KOEPWCcyFwP5u1EJf8A6h7kUyN9NSvgD3qeby4H83ayEP+B9prkSyN8tSvgD3ieZq4H83aqEP2Ceb64F8nebEv6Aeaq5Hsjf7Ur4A+ZZ5kYgf3co4Q+YJ5ibgfzdqYQ/oM6ZW4H83aWEP+A6bW4H8ne3Ev6A64y5E8jfPUr4A14n5m4gf/dWE3/J+jkct5/cAOeMscVfBDz/0oBjMSJdR8wRYMwjlcScDox5lJKYawBjHq0k5gxgzGOUxFwTGPNYJTHXAsa8r5KY9wDGPE5JzGuAMY9XEnMjYMwTQhjzxBDGPCmEMU8OYcz7hTDmKSGMuTCEMReFMObiEMZcEsKYS0MYc1kIY54awpinhTDm6SGMeUYIY54ZwphnhTDm2SGMeU4IY54bwpjnhTDm+SGMeUEIY14YwpgXhTDmxSGMeUkIY14awpiXhTDm5SGMeUUIY14Zwpj3D2HMq0IY8+oQxrwmhDEfEMKYDwxhzP8LYcwHhTDmg0MY8yEhjPnQEMZ8WAhjPjyEMR8RwpiPDGHMR4Uw5qNDGPMxIYz52BDGfFwIYz4+hDGfEMKYTwxhzCeFMOaTQxjzKSGM+dQQxnxaCGM+PYQxnxHCmM8MYcxnhTDms0MY8zkhjPncEMZ8XghjPj+EMV8QwpgvDGHMF4Uw5otDGPMlIYz50hDGfFkIY748hDFfEcKYrwxhzFeFMOarQxjzNSGM+doQxnxdCGO+PoQx3xDCmG8MYcw3hTDmm0MY8y0hjPnWEMZ8Wwhjvj2EMd8RwpjvDGHMd4Uw5rtDGPM9IYz53hDGfF8IY74/hDE/EMKYHwxhzA+FMOaHQxjzIyGM+dEQxvxYCGN+PIQxPxHCmJ8MYcxPhTDmp0MY8zNKYh6Wjov52RCO83MhjPn5EMb8gpKY94/gYn4xhOP8UghjfjmEMb+iJObhQH1+NYTj/FoIY349hDG/EcKY3wxhzG+FMOa3QxjzO0pirg2M+V0lMdcBxvyekpi3Asb8vpKYtwbG/IGSmLcBxvyhkpi3Bcb8kZKY6wJj/lhJzNsBY/5ESczbA2P+VEnMOwBj/kxJzDsCY/5cScw7AWP+QknMOwNj/lJJzLsAY/5KScy7AmP+GhhzQ+knTWKmrr0ahAxCTUItAt8T8j0S3zNwDs05JedYnHOwBrMm8RrNaxZfwzyneYw55nqE3Qj1CQ0IDX0cnyV2BP3RkYRRhNGEMYSxhH0J4wjjCRMIEwmTCJMJ+xGmEAoJRYRiQgmhlFBGmErg797zd+D5u+j8nXD+bjZ/R5q/q8zfGebv7vJ3aPm7rPydUv5uJ3/Hkr/ryN855O/+8Xfw+Ltw/J00/m4Yf0eLvyvF31ni7w7xd3j4uzT8nRb+bgl/x4O/a8HfeeDvHvB3APi9+PyeeH5vOr9HnN+rze+Z5vcu83uI+b28/J5afm8rv8eU3+vJ77nk9z7yexD5vYD8njx+bxy/R43fK8bv2eL3TvF7mPi9RPyeHn5vDb/Hhd9rwu/54Pde8Hsg+L0I/J4A/t08/46cf1fNvzPm393y71D5d5n8O0X+3R7/jo1/18W/c+Lf/fDvYPh3Ifw7Cf7dAO+j533lvM+a9x3zPlzel8r7NHnfIu/j431tvM+L9z3xPiDeF8P7RHjfBO8j4Ofq/JyZn7vyc0h+LsfPqfi5DT/H4Lo+17m57st1UK4Lcp2M60ZcR+G6At9n830n34fxfQnn6Zy3ch7HeQ3rPOse6wCvi7xO8HVTfvwfH08jz7xQBAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "exit_to_l1_public",
      "functionType": "open",
      "isInternal": false,
      "parameters": [
        {
          "name": "recipient",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "amount",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "callerOnL1",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_token",
      "functionType": "open",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "token",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VTWwrCMBDcvI2C/356g3qDnsEbFCx+Cur9scEMHWPwx2Sh7DZJZyazWyUiSt5hZA1V1Mdce1ofcx7+DE98rTDdguEyViTNOud9votuy3vaVTz05G0rHu4P4wpxRfnsI9ZM4UWkGnvJuwPt28o3OGsr5/jursPdmWekd3BtSYMlLb6tliFhBFnDEBd0QFMgn0Khl3sQKPeYnR494d4jfs0o+DfLg3/m8bzdp+t8nqeLIohypDTBcM1jD/t5NHEWe0G+JTbzo8RVRU7xAo43T8Z8BQAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "",
      "",
      "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9Kv84dOv8odPv8ofPv0qf/j0q/zh0u/ke1F5+lX+8OlX+cOnX+UPn36VP3z6Vf7w6Vf5w6df5Q+ffpU/fPpV/nDpd/L94Dz9Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0+/yh8+/Sp/uPTj3H/eSb/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0+/yh8u/Tj3n3fSr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh06/yh0s/zv3nnfSr/OHTD5M/3v7dt5XX5bT5k5z7zzvph8kfnfTD5I9O+mHyRyf9MPmjk36Y/NFJP0z+6KMf5/7zTvph8kcn/Sp/+PSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofHv12zv3nnfSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf/j0q/zh0o9z/3kn/Sp/+PSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofPv0qf7j049x/3km/yh8+/Sp/+PSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odPv8ofLv0495930q/yh0+/yh8+/Sp/+PSr/OHTr/KHT7/KHz79Kn/49Kv84dOv8odLP8795530q/zh06/yh0+/yh8+/Sp/+PSr/OHTr/KHTz9O/tje9fsgSrZ+nPzRRz9O/uiiH+f+8076cfJHH/04+aOPfpz80Uc/Tv7oox8nf/TRj5M/+uhX+cOnX+UPn36VP1z6ce4/76Rf5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT98+lX+8OlX+cOnX+UPl36c+8876Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT98+lX+8OlX+cOlH+f+8076Vf7w6Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT98+lX+cOkHuv+8j36VP3z6Vf7w6Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT88+h2g+8/76Ff5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT98+lX+8OlX+cOlH+j+8z76Vf7w6YfJH23ebiu3tp6mHyZ/dNIPkz866YfJH530w+SPTvph8kcn/TD5o5N+mPzRRz/O/eed9MPkj076Vf7w6Vf5w6df5Q+ffpU/fPpV/vDpV/nDp1/lD59+lT9c+nHuP++kX+UP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",
      "",
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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",
      "",
      "",
      "eJzNlEEKgzAQRe8y61Ayk0k0uUrpQloLgthS3UnuXktTWzDFjcjsEngf3iJ5I7S3czU0t66HMII+WAjHEfp71b3u/VA9BgiOS6+g7i7T0WofFVybtoaAUS1YJEeJRWPMzBacgY3lxBpvZ9S5eFKTixPkUghyKQW5eEEuqCXJoCQZkiRjJMmwJBlJ9UVJ+UVJ/UVJAcZ9C8waE8ukf2WWKKFLKNHXuzRvb9o31tt579v17byzbSFdfDbMi7dF2QSsbLI/dWWT/VArm+y7/7+J8QkAHyy2"
    ],
    "fileMap": {
      "1": {
        "source": "// docs:start:token_bridge_imports\nmod token_interface;\n\n// Minimal implementation of the token bridge that can move funds between L1 <> L2.\n// The bridge has a corresponding Portal contract on L1 that it is attached to\n// And corresponds to a Token on L2 that uses the `AuthWit` accounts pattern.\n// Bridge has to be set as a minter on the token before it can be used\n\ncontract TokenBridge {\n    use dep::aztec::{\n        context::{Context},\n        hash::{compute_secret_hash},\n        state_vars::{public_state::PublicState},\n        types::type_serialization::field_serialization::{\n            FieldSerializationMethods, FIELD_SERIALIZED_LEN,\n        },\n        types::address::{AztecAddress, EthereumAddress},\n        selector::compute_selector,\n    };\n    // docs:end:token_bridge_imports\n\n    use dep::token_portal_content_hash_lib::{get_mint_public_content_hash, get_mint_private_content_hash, get_withdraw_content_hash};\n\n    use crate::token_interface::Token;\n\n    // docs:start:token_bridge_storage_and_constructor\n    // Storage structure, containing all storage, and specifying what slots they use.\n    struct Storage {\n        token: PublicState<Field, 1>,\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                token: PublicState::new(\n                    context,\n                    1,\n                    FieldSerializationMethods,\n                ),\n            }\n        }\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    fn constructor(token: AztecAddress) {\n        let selector = compute_selector(\"_initialize((Field))\");\n        context.call_public_function(context.this_address(), selector, [token.address]);\n    }\n    // docs:end:token_bridge_storage_and_constructor\n\n    // docs:start:claim_public\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount publicly\n    #[aztec(public)]\n    fn claim_public(to: AztecAddress, amount: Field, canceller: EthereumAddress, msg_key: Field, secret: Field) -> Field {\n        let content_hash = get_mint_public_content_hash(to.address, amount, canceller.address);\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret);\n\n        // Mint tokens\n        Token::at(storage.token.read()).mint_public(context, to.address, amount);\n\n        1\n    }\n    // docs:end:claim_public\n\n    // docs:start:exit_to_l1_public\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message publicly\n    // Requires `msg.sender` to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(public)]\n    fn exit_to_l1_public(\n        recipient: EthereumAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthereumAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) -> Field {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient.address, amount, callerOnL1.address);\n        context.message_portal(content);\n\n        // Burn tokens\n        Token::at(storage.token.read()).burn_public(context, context.msg_sender(), amount, nonce);\n\n        1\n    }\n    // docs:end:exit_to_l1_public\n    // docs:start:claim_private\n    // Consumes a L1->L2 message and calls the token contract to mint the appropriate amount in private assets\n    // User needs to call token.redeem_shield() to get the private assets\n    #[aztec(private)]\n    fn claim_private(\n        secret_hash_for_redeeming_minted_notes: Field, // secret hash used to redeem minted notes at a later time. This enables anyone to call this function and mint tokens to a user on their behalf\n        amount: Field,\n        canceller: EthereumAddress,\n        msg_key: Field, // L1 to L2 message key as derived from the inbox contract\n        secret_for_L1_to_L2_message_consumption: Field // secret used to consume the L1 to L2 message\n    ) -> Field {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes,\n            amount,\n            canceller.address);\n        context.consume_l1_to_l2_message(msg_key, content_hash, secret_for_L1_to_L2_message_consumption);\n\n        // Mint tokens on L2\n        // `mint_private` on token is public. So we call an internal public function\n        // which then calls the public method on the token contract.\n        // Since the secret_hash is passed, no secret is leaked.\n        context.call_public_function(context.this_address(),\n            compute_selector(\"_call_mint_on_token(Field,Field)\"),\n            [amount, secret_hash_for_redeeming_minted_notes]);\n\n        1\n    }\n    // docs:end:claim_private\n\n    // docs:start:exit_to_l1_private\n    // Burns the appropriate amount of tokens and creates a L2 to L1 withdraw message privately\n    // Requires `msg.sender` (caller of the method) to give approval to the bridge to burn tokens on their behalf using witness signatures\n    #[aztec(private)]\n    fn exit_to_l1_private(\n        token: AztecAddress,\n        recipient: EthereumAddress, // ethereum address to withdraw to\n        amount: Field,\n        callerOnL1: EthereumAddress, // ethereum address that can call this function on the L1 portal (0x0 if anyone can call)\n        nonce: Field // nonce used in the approval message by `msg.sender` to let bridge burn their tokens on L2\n    ) -> Field {\n        // Send an L2 to L1 message\n        let content = get_withdraw_content_hash(recipient.address, amount, callerOnL1.address);\n        context.message_portal(content);\n\n        // Assert that user provided token address is same as seen in storage.\n        context.call_public_function(context.this_address(),\n            compute_selector(\"_assert_token_is_same(Field)\"),\n            [token.address]);\n\n        // Burn tokens\n        Token::at(token.address).burn(&mut context, context.msg_sender(), amount, nonce);\n\n        1\n    }\n    /// docs:end:exit_to_l1_private\n\n    // View function that is callable by other contracts.\n    // Unconstrained can't be called by others since it isn't safe.\n    #[aztec(public)]\n    fn get_token() -> Field {\n        storage.token.read()\n    }\n\n    // /// Unconstrained ///\n\n    unconstrained fn token() -> Field {\n        storage.token.read()\n    }\n\n    #[aztec(public)]\n    internal fn _initialize(token: AztecAddress) {\n        storage.token.write(token.address);\n    }\n\n    // docs:start:call_mint_on_token\n    // This is a public call as we need to read from public storage.\n    // Also, note that user hashes their secret in private and only sends the hash in public\n    // meaning only user can `redeem_shield` at a later time with their secret.\n    #[aztec(public)]\n    internal fn _call_mint_on_token(amount: Field, secret_hash: Field) {\n        Token::at(storage.token.read()).mint_private(context, amount, secret_hash);\n    }\n    // docs:end:call_mint_on_token\n\n    // docs:start:assert_token_is_same\n    #[aztec(public)]\n    internal fn _assert_token_is_same(token: Field) {\n        assert(storage.token.read() == token, \"Token address is not the same as seen in storage\");\n    }\n    // docs:end:assert_token_is_same\n\n    // TODO: remove this placeholder once https://github.com/AztecProtocol/aztec-packages/issues/2918 is implemented\n    // docs:start:compute_note_hash_and_nullifier_placeholder\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, serialized_note: [Field; 0]) -> [Field; 4] {\n        [0, 0, 0, 0]\n    }\n    // docs:end:compute_note_hash_and_nullifier_placeholder\n}\n",
        "path": "/mnt/user-data/sean/docs/aztec3-packages/yarn-project/noir-contracts/src/contracts/token_bridge_contract/src/main.nr"
      },
      "3": {
        "source": "// docs:start:mint_public_content_hash_nr\nuse dep::aztec::hash::{sha256_to_field};\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner_address: Field, amount: Field, canceller: Field) -> Field {\n    \n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = owner_address.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xefc2aae6 keccak256('mint_public(bytes32,uint256,address)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xc2;\n    hash_bytes[2] = 0xaa;\n    hash_bytes[3] = 0xe6;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes: Field, amount: Field, canceller: Field) -> Field {\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = canceller_bytes[i];\n    }\n\n    // Function selector: 0xf512262e keccak256('mint_private(bytes32,uint256,address)')\n    hash_bytes[0] = 0xf5;\n    hash_bytes[1] = 0x12;\n    hash_bytes[2] = 0x26;\n    hash_bytes[3] = 0x2e;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: Field, amount: Field, callerOnL1: Field) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let callerOnL1_bytes = callerOnL1.to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = callerOnL1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n",
        "path": "/token_portal_content_hash_lib/lib.nr"
      },
      "22": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32 : [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}",
        "path": "std/field.nr"
      },
      "33": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option.nr"
      },
      "36": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/aztec/abi.nr"
      },
      "39": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}\n",
        "path": "/aztec/context.nr"
      },
      "40": {
        "source": "use dep::std::hash::{pedersen_hash_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    // TODO(#1205) This is probably not the right index to use\n    pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_with_separator(inputs, hash_index)\n}\n",
        "path": "/aztec/hash.nr"
      },
      "42": {
        "source": "mod l1_to_l2_message;\nmod l1_to_l2_message_getter_data;\n\nuse l1_to_l2_message_getter_data::make_l1_to_l2_message_getter_data;\n\nuse crate::abi::PublicContextInputs;\nuse crate::oracle::get_l1_to_l2_message::get_l1_to_l2_message_call;\n\n// Returns the nullifier for the message\npub fn process_l1_to_l2_message(l1_to_l2_root: Field, storage_contract_address: Field, msg_key: Field, content: Field, secret: Field) -> Field {\n    let returned_message = get_l1_to_l2_message_call(msg_key);\n    let l1_to_l2_message_data = make_l1_to_l2_message_getter_data(returned_message, 0, secret);\n\n    // Check tree roots against the inputs \n    assert(l1_to_l2_message_data.root == l1_to_l2_root);\n\n    // Validate this is the target contract\n    assert(l1_to_l2_message_data.message.recipient == storage_contract_address);\n\n    // Validate the message hash is correct\n    assert(l1_to_l2_message_data.message.content == content);\n\n    // Validate the message secret is correct\n    l1_to_l2_message_data.message.validate_message_secret();\n\n    // Compute Nullifier\n    l1_to_l2_message_data.message.compute_nullifier()\n}\n",
        "path": "/aztec/messaging.nr"
      },
      "43": {
        "source": "use crate::constants_gen::{\n    L1_TO_L2_MESSAGE_LENGTH,\n    GENERATOR_INDEX__NULLIFIER,\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\nuse crate::hash::{sha256_to_field, pedersen_hash};\n\nstruct L1ToL2Message {\n    sender: Field,\n    chainId: Field,\n    recipient: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    deadline: u32,\n    fee: u64,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: fields[0],\n            chainId: fields[1],\n            recipient: fields[2],\n            version: fields[3],\n            content: fields[4],\n            secret: secret,\n            secret_hash: fields[5],\n            deadline: fields[6] as u32,\n            fee: fields[7] as u64,\n            tree_index: tree_index\n        }\n    }\n\n    pub fn validate_message_secret(self: Self) {\n        let recomputed_hash = pedersen_hash([self.secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        assert(self.secret_hash == recomputed_hash);\n    }\n\n    fn message_hash(self: Self) -> Field {\n        let mut hash_bytes: [u8; 256] = [0; 256];\n        let sender_bytes = self.sender.to_be_bytes(32);\n        let chainId_bytes = self.chainId.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n        let deadline_bytes = (self.deadline as Field).to_be_bytes(32);\n        let fee_bytes = (self.fee as Field).to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chainId_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n            hash_bytes[i + 192] = deadline_bytes[i];\n            hash_bytes[i + 224] = fee_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash        \n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.message_hash();\n        pedersen_hash([message_hash, self.secret, self.tree_index], GENERATOR_INDEX__NULLIFIER)\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n",
        "path": "/aztec/messaging/l1_to_l2_message.nr"
      },
      "44": {
        "source": "use crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse crate::constants_gen::{\n    L1_TO_L2_MSG_TREE_HEIGHT,\n    L1_TO_L2_MESSAGE_LENGTH,\n};\nuse crate::utils::arr_copy_slice;\n\nstruct L1ToL2MessageGetterData {\n    message: L1ToL2Message,\n    sibling_path: [Field; L1_TO_L2_MSG_TREE_HEIGHT],\n    leaf_index: Field,\n    root: Field,\n}\n\npub fn l1_to_l2_message_getter_len() -> Field {\n    L1_TO_L2_MESSAGE_LENGTH + 1 + L1_TO_L2_MSG_TREE_HEIGHT + 1\n}\n\npub fn make_l1_to_l2_message_getter_data<N>(fields: [Field; N], start: Field, secret: Field) -> L1ToL2MessageGetterData {\n    L1ToL2MessageGetterData {\n        message: L1ToL2Message::deserialize(arr_copy_slice(fields, [0; L1_TO_L2_MESSAGE_LENGTH], start),\n            secret,\n            fields[start + L1_TO_L2_MESSAGE_LENGTH]),\n        leaf_index: fields[start + L1_TO_L2_MESSAGE_LENGTH],\n        sibling_path: arr_copy_slice(fields,\n            [0; L1_TO_L2_MSG_TREE_HEIGHT],\n            L1_TO_L2_MESSAGE_LENGTH + 1),\n        root: fields[start + L1_TO_L2_MESSAGE_LENGTH + L1_TO_L2_MSG_TREE_HEIGHT + 1]\n    }\n}\n",
        "path": "/aztec/messaging/l1_to_l2_message_getter_data.nr"
      },
      "55": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/aztec/oracle/arguments.nr"
      },
      "56": {
        "source": "use crate::constants_gen::CALL_PRIVATE_FUNCTION_RETURN_SIZE;\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {}\n\nunconstrained pub fn call_private_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; CALL_PRIVATE_FUNCTION_RETURN_SIZE] {\n    call_private_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/call_private_function.nr"
      },
      "59": {
        "source": "use crate::constants_gen::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2Message)]\nfn get_l1_to_l2_msg_oracle(_msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_message_call(msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_msg_oracle(msg_key)\n}\n",
        "path": "/aztec/oracle/get_l1_to_l2_message.nr"
      },
      "63": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/enqueue_public_function_call.nr"
      },
      "64": {
        "source": "use crate::constants_gen::RETURN_VALUES_LENGTH;\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(_contract_address: Field, _function_selector: Field, _args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(contract_address: Field, function_selector: Field, args_hash: Field) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(contract_address, function_selector, args_hash)\n}\n",
        "path": "/aztec/oracle/public_call.nr"
      },
      "66": {
        "source": "#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(storage_slot: Field, deserialize: fn ([Field; N]) -> T) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n",
        "path": "/aztec/oracle/storage.nr"
      },
      "68": {
        "source": "use crate::abi::FunctionData;\nuse crate::abi::PrivateCircuitPublicInputs;\nuse crate::constants_gen::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::hash::pedersen_hash;\n\nstruct PrivateCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PrivateCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n",
        "path": "/aztec/private_call_stack_item.nr"
      },
      "69": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/aztec/public_call_stack_item.nr"
      },
      "70": {
        "source": "use crate::utils::field_from_bytes;\n\nglobal SELECTOR_SIZE = 4;\n\npub fn compute_selector<N>(signature: str<N>) -> Field {\n    let bytes = signature.as_bytes();\n    let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n    let mut selector_be_bytes = [0; SELECTOR_SIZE];\n    for i in 0..SELECTOR_SIZE {\n        selector_be_bytes[i] = hash[i];\n    }\n\n    field_from_bytes(selector_be_bytes, true)\n}\n",
        "path": "/aztec/selector.nr"
      },
      "74": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/aztec/state_vars/public_state.nr"
      },
      "80": {
        "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}\n",
        "path": "/aztec/types/vec.nr"
      },
      "83": {
        "source": "use crate::types::type_serialization::TypeSerializationInterface;\n\n// docs:start:field_serialization\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nfn deserializeField(fields: [Field; FIELD_SERIALIZED_LEN]) -> Field {\n    fields[0]\n}\n\nfn serializeField(value: Field) -> [Field; FIELD_SERIALIZED_LEN] {\n    [value]\n}\n\nglobal FieldSerializationMethods = TypeSerializationInterface {\n    deserialize: deserializeField,\n    serialize: serializeField,\n};\n// docs:end:field_serialization",
        "path": "/aztec/types/type_serialization/field_serialization.nr"
      },
      "86": {
        "source": "pub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n",
        "path": "/aztec/utils.nr"
      },
      "87": {
        "source": "// docs:start:token_bridge_token_interface\nuse dep::aztec::{\n  context::{ PrivateContext, PublicContext, Context },\n  selector::compute_selector,\n};\n\nstruct Token {\n  address: Field,\n}\n\nimpl Token {\n  pub fn at(address: Field) -> Self {\n    Self { address }\n  }\n\n  pub fn mint_public(self: Self, context: PublicContext, to: Field, amount: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"mint_public((Field),Field)\"),\n      [to, amount]\n    );\n  }\n\n  // docs:start:public_burn_interface\n  pub fn burn_public(self: Self, context: PublicContext, from: Field, amount: Field, nonce: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"burn_public((Field),Field,Field)\"),\n      [from, amount, nonce]\n    );\n  }\n  // docs:end:public_burn_interface\n\n  pub fn mint_private(self: Self, context: PublicContext, amount: Field, secret_hash: Field) {\n    let _return_values = context.call_public_function(\n      self.address,\n      compute_selector(\"mint_private(Field,Field)\"),\n      [amount, secret_hash]\n    );\n  }\n\n\n  // docs:start:private_burn_interface\n  pub fn burn(self: Self, context: &mut PrivateContext, from: Field, amount: Field, nonce: Field) {\n    let _return_values = context.call_private_function(\n      self.address,\n      compute_selector(\"burn((Field),Field,Field)\"),\n      [from, amount, nonce]\n    );\n  }\n  // docs:end:private_burn_interface\n}\n// docs:end:token_bridge_token_interface\n",
        "path": "/mnt/user-data/sean/docs/aztec3-packages/yarn-project/noir-contracts/src/contracts/token_bridge_contract/src/token_interface.nr"
      }
    }
  }
}
