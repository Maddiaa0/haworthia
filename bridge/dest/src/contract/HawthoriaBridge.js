/* Autogenerated file, do not edit! */
/* eslint-disable */
import { ContractBase, DeployMethod } from '@aztec/aztec.js';
import { Point } from '@aztec/foundation/fields';
import HawthoriaBridgeContractAbiJson from '../../circuits/target/HawthoriaBridge.json' assert { type: 'json' };
export const HawthoriaBridgeContractAbi = HawthoriaBridgeContractAbiJson;
/**
 * Type-safe interface for contract HawthoriaBridge;
 */
export class HawthoriaBridgeContract extends ContractBase {
    constructor(
    /** The deployed contract's complete address. */
    completeAddress, 
    /** The wallet. */
    wallet) {
        super(completeAddress, HawthoriaBridgeContractAbi, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(
    /** The deployed contract's address. */
    address, 
    /** The wallet. */
    wallet) {
        const extendedContractData = await wallet.getExtendedContractData(address);
        if (extendedContractData === undefined) {
            throw new Error('Contract ' + address.toString() + ' is not deployed');
        }
        return new HawthoriaBridgeContract(extendedContractData.getCompleteAddress(), wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc) {
        return new DeployMethod(Point.ZERO, rpc, HawthoriaBridgeContractAbi, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc, publicKey) {
        return new DeployMethod(publicKey, rpc, HawthoriaBridgeContractAbi, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's ABI.
     */
    static get abi() {
        return HawthoriaBridgeContractAbi;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSGF3dGhvcmlhQnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnRyYWN0L0hhd3Rob3JpYUJyaWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFBaUMsWUFBWSxFQUErQyxZQUFZLEVBQXFCLE1BQU0saUJBQWlCLENBQUM7QUFDNUosT0FBTyxFQUFNLEtBQUssRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR3JELE9BQU8sOEJBQThCLE1BQU0sNENBQTRDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDaEgsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsOEJBQTZDLENBQUM7QUFFeEY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsWUFBWTtJQUV2RDtJQUNFLGdEQUFnRDtJQUNoRCxlQUFnQztJQUNoQyxrQkFBa0I7SUFDbEIsTUFBYztRQUVkLEtBQUssQ0FBQyxlQUFlLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUlEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO0lBQ3BCLHVDQUF1QztJQUN2QyxPQUFxQjtJQUNyQixrQkFBa0I7SUFDbEIsTUFBYztRQUVkLE1BQU0sb0JBQW9CLEdBQUcsTUFBTSxNQUFNLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0UsSUFBSSxvQkFBb0IsS0FBSyxTQUFTLEVBQUU7WUFDdEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLGtCQUFrQixDQUFDLENBQUM7U0FDeEU7UUFDRCxPQUFPLElBQUksdUJBQXVCLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4RixDQUFDO0lBR0Q7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQWE7UUFDaEMsT0FBTyxJQUFJLFlBQVksQ0FBMEIsS0FBSyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoSSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBYSxFQUFFLFNBQW9CO1FBQ25FLE9BQU8sSUFBSSxZQUFZLENBQTBCLFNBQVMsRUFBRSxHQUFHLEVBQUUsMEJBQTBCLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvSCxDQUFDO0lBSUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssR0FBRztRQUNuQixPQUFPLDBCQUEwQixDQUFDO0lBQ3BDLENBQUM7Q0FlRiJ9